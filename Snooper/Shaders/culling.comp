layout(local_size_x = 64) in;

struct AABB {
    vec3 center;
    float drawId;
    vec3 extents;
    float instanceCount;
    float sectionCount;
};

struct PerInstanceData {
    mat4 Matrix;
};

struct DrawElementsIndirectCommand {
    uint count;
    uint instanceCount;
    uint firstIndex;
    uint baseVertex;
    uint baseInstance;
};

layout(std430, binding = 0) readonly buffer InstanceBuffer {
    PerInstanceData instances[];
};

layout(std430, binding = 1) readonly buffer AABBBuffer {
    AABB bounds[];
};

layout(std430, binding = 2) buffer DrawCommandBuffer {
    DrawElementsIndirectCommand commands[];
};

uniform vec4 uFrustumPlanes[6];

bool isAABBVisible(vec3 center, vec3 extents)
{
    bool isInside = true;
    for (int i = 0; i < 6; ++i)
    {
        vec4 plane = uFrustumPlanes[i];
        vec3 normal = plane.xyz;
        float d = plane.w;
        
        float r = dot(abs(normal), extents);
        float s = dot(normal, center) + d;
        if (s < -r)
        {
            isInside = false;
            break;
        }
    }
    
    return isInside;
}

void main()
{
    uint modelId = gl_GlobalInvocationID.x;
    if (modelId >= bounds.length()) return;

    AABB bound = bounds[modelId];
    uint drawId = uint(bound.drawId);
    if (drawId >= commands.length()) return;

    uint instanceCount = uint(bound.instanceCount);
    vec3 center = bound.center;
    vec3 extents = bound.extents;
    
    uint sectionCount = uint(bound.sectionCount);
    for (uint i = 0; i < sectionCount; ++i)
    {
        DrawElementsIndirectCommand cmd = commands[drawId + i];
        uint baseInstance = cmd.baseInstance;

        uint visibleCount = 0;
        for (uint j = 0; j < instanceCount; ++j)
        {
            mat4 modelMatrix = instances[baseInstance + j].Matrix;

            vec3 transformedCenter = (modelMatrix * vec4(center, 1.0)).xyz;
            vec3 transformedExtents = abs(mat3(modelMatrix) * extents);

            if (isAABBVisible(transformedCenter, transformedExtents))
            {
                visibleCount++;
            }
        }

        commands[drawId + i].instanceCount = visibleCount > 0 ? instanceCount : 0;
    }
}
